{"version":3,"sources":["Components/child.js","Components/testclass.js","Components/sateclass.js","Components/Counter.js","Components/eventHandler.js","Components/Parent.js","Components/ConditionalOperators.js","Components/inlinestyling.js","Notestakingapp/Noteapp.js","App.js","serviceWorker.js","index.js"],"names":["ChildComponent","Component","props","onClick","HandleClick","InlineStyling","Noteapp","addNoteHandler","event","console","log","theTitle","value","newItem","title","note","theNote","setState","prevstate","items","concat","preventDefault","removeHandler","index","state","splice","className","this","map","val","style","fontSize","float","padding","color","moment","format","type","cursor","marginRight","outline","theme","onSubmit","placeholder","ref","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6NAOeA,GCLOC,YCAKA,YCAJA,YCAIA,YJCJ,SAACC,GACtB,OAAO,4BAAQC,QAAW,kBAAMD,EAAME,YAAY,WAA3C,cKDqBH,YCDHA,Y,MCWZI,I,iBCsFAC,E,YA/FX,WAAYJ,GAAQ,IAAD,8BACf,4CAAMA,KAOVK,eAAiB,SAAAC,GAEb,GADAC,QAAQC,IAAI,eACqB,IAA7B,EAAKC,SAASC,MAAMA,MACpB,IAAIC,EAAU,CACVC,MAAO,EAAKH,SAASC,MACrBG,KAAM,EAAKC,QAAQJ,OAI3B,EAAKK,UAAS,SAAAC,GACV,MAAO,CACHC,MAAOD,EAAUC,MAAMC,OAAOP,OAItC,EAAKG,QAAQJ,MAAQ,GACrB,EAAKD,SAASC,MAAQ,GACtBJ,EAAMa,kBAzBS,EA2BnBC,cAAgB,SAAAC,GAAU,IAChBJ,EAAU,EAAKK,MAAfL,MAENV,QAAQC,IAAIa,GACZJ,EAAMM,OAAOF,EAAO,GACpB,EAAKN,SAAS,CAAEE,WA7BhB,EAAKK,MAAQ,CACTL,MAAO,IAJI,E,sEAmCT,IAAD,OACL,OACI,6BACI,yBAAKO,UAAU,UACX,gDAEJ,gCACKC,KAAKH,MAAML,MAAMS,KAAI,SAACC,EAAKN,GAAN,OAClB,yBAAKG,UAAU,MACX,4BACII,MAAO,CACHC,SAAU,GACVC,MAAO,OACPC,QAAS,EACTC,MAAO,UAIVC,IAASC,OAAO,oBAErB,6BACCP,EAAIf,MAbT,IAaiBe,EAAId,KACjB,kBAAC,IAAD,CACIsB,KAAK,SACLP,MAAO,CACHC,SAAU,OACVG,MAAO,mBACPF,MAAO,QACPM,OAAQ,UACRC,YAAa,GACbN,QAAS,EACTO,QAAS,QAEbC,MAAM,SACNtC,QAAS,kBAAM,EAAKmB,cAAcC,WAMlD,yBAAKG,UAAU,UACX,0BAAMgB,SAAUf,KAAKpB,gBACjB,2BACI8B,KAAK,OACLM,YAAY,sBACZC,IAAK,SAAA9B,GAAK,OAAK,EAAKH,SAAWG,KAEnC,8BACI6B,YAAY,sBACZC,IAAK,SAAA7B,GAAI,OAAK,EAAKC,QAAUD,KAGjC,4BAAQsB,KAAK,UAAb,mB,GAxFFpC,a,OCiCP4C,MArBf,WACE,OACE,yBAAKnB,UAAU,OAcjB,kBAAC,EAAD,QCnBkBoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.e0c5b007.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\n\r\nconst ChildComponent = (props) => {\r\n  return <button onClick = {() => props.HandleClick('Kiran')}>Click Me</button>;\r\n};\r\n\r\nexport default ChildComponent;\r\n","import React, {Component} from 'react';\r\n\r\nclass Message extends Component {\r\n    render(){\r\n        return(\r\n            <div> {this.props.relation} are my world</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message;\r\n","import React, { Component } from \"react\";\r\n\r\nclass MessageState extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      My_Message: \"my testing dynamic state\"\r\n    };\r\n  }\r\n\r\n  OnChangeHandler = () =>{\r\n      this.setState({\r\n          My_Message: 'Thanks for clicking the event'\r\n      })\r\n  }\r\n  render() {\r\n    return <div> \r\n        <h1 onClick = {()=>this.OnChangeHandler()}>\r\n        {this.state.My_Message} </h1>\r\n        <br></br>\r\n        <button onClick = {()=>this.OnChangeHandler()}>Click to Change</button>\r\n     </div>;\r\n  }\r\n}\r\nexport default MessageState;\r\n","import React, { Component } from 'react'\r\n\r\n class Counter extends Component {\r\n     constructor(){\r\n         super()\r\n         this.state = {\r\n             count: 0 \r\n         }\r\n     }\r\n     OnClickHandler = ()=>{\r\n         this.setState({\r\n             count : this.state.count +1\r\n         })\r\n     }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>Count : {this.state.count}</h1>\r\n                <button onClick = {this.OnClickHandler}>CliCk to Increse</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Counter;\r\n","import React, {Component} from 'react';\r\n\r\nclass Eventhandler extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            Message :'Hallo saikiran'\r\n        }\r\n    }\r\n      ClickHandler = () => {\r\nthis.setState({\r\n    Message: 'How r u '\r\n})\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>{this.state.Message}</h1>\r\n                 <button onClick = {this.ClickHandler}>Click</button>\r\n            </div>\r\n           \r\n        )\r\n    }\r\n}\r\nexport default  Eventhandler;","import React ,{Component} from 'react';\r\nimport ChildComponent from './child'\r\n\r\nclass ParentComponent extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            Message: ' Sai'\r\n        }\r\n    }\r\n\r\n    HandlerMethod = (LastName) => {\r\n         alert(`Hello ${this.state.Message} ${LastName}`)\r\n         console.log(React.version)\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <ChildComponent HandleClick = {this.HandlerMethod} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default  ParentComponent;","import React, {Component} from 'react'\r\n\r\nclass Conditional  extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             IsLoggedIn : true\r\n        }\r\n    }\r\n    \r\n    render(){\r\n    //     let Message;\r\n    // if(this.state.IsLoggedIn){\r\n    //     Message= <div>Welcome Saikiran</div>\r\n    // }\r\n    // else{\r\n    //     Message= <div>Welcome Guest</div>\r\n    // }\r\n    //     return(\r\n    //         <div>{Message}</div>\r\n    //     )\r\n    // return(\r\n    //     this.state.IsLoggedIn ? (<div>Welcome saikiran</div>) : (<div>Welcome Guest</div>)\r\n    // )\r\n    return(\r\n        this.state.IsLoggedIn && <div>Welcome Saikiran</div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Conditional;\r\n","import React from 'react'\r\n\r\nconst inline = {\r\n    fontSize: '50px',\r\n    color: 'blue'\r\n}\r\nfunction InlineStyling() {\r\n    return (\r\n        <div style = {inline}>\r\n            welcome kiran\r\n        </div>\r\n    )\r\n}\r\nexport default InlineStyling;","import React, { Component } from \"react\";\r\nimport { Icon } from \"antd\";\r\nimport * as moment from \"moment\";\r\nclass Noteapp extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            items: []\r\n        };\r\n    }\r\n\r\n    addNoteHandler = event => {\r\n        console.log(\"its working\");\r\n        if (this.theTitle.value.value != \"\") {\r\n            var newItem = {\r\n                title: this.theTitle.value,\r\n                note: this.theNote.value\r\n            };\r\n        }\r\n\r\n        this.setState(prevstate => {\r\n            return {\r\n                items: prevstate.items.concat(newItem)\r\n            };\r\n        });\r\n\r\n        this.theNote.value = \"\";\r\n        this.theTitle.value = \"\";\r\n        event.preventDefault();\r\n    };\r\n    removeHandler = index => {\r\n        let { items } = this.state;\r\n\r\n        console.log(index);\r\n        items.splice(index, 1);\r\n        this.setState({ items });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className=\"Navbar\">\r\n                    <h1>Note Taking App</h1>\r\n                </div>\r\n                <header>\r\n                    {this.state.items.map((val, index) => (\r\n                        <div className=\"s1\">\r\n                            <moment\r\n                                style={{\r\n                                    fontSize: 10,\r\n                                    float: \"left\",\r\n                                    padding: 2,\r\n                                    color: \"green\",\r\n                                    \r\n                                }}\r\n                            >\r\n                                {moment().format(\"MMMM Do YYYY,LT\")}\r\n                            </moment>\r\n                            <br />\r\n                            {val.title}-{val.note}\r\n                            <Icon\r\n                                type=\"delete\"\r\n                                style={{\r\n                                    fontSize: \"15px\",\r\n                                    color: \"rgb(179, 76, 76)\",\r\n                                    float: \"right\",\r\n                                    cursor: \"pointer\",\r\n                                    marginRight: 30,\r\n                                    padding: 5,\r\n                                    outline: \"none\"\r\n                                }}\r\n                                theme=\"filled\"\r\n                                onClick={() => this.removeHandler(index)}\r\n                            />\r\n                        </div>\r\n                    ))}\r\n                </header>\r\n\r\n                <div className=\"footer\">\r\n                    <form onSubmit={this.addNoteHandler}>\r\n                        <input\r\n                            type=\"text\"\r\n                            placeholder=\"Enter the note here\"\r\n                            ref={title => (this.theTitle = title)}\r\n                        />\r\n                        <textarea\r\n                            placeholder=\"Enter the text here\"\r\n                            ref={note => (this.theNote = note)}\r\n                        />\r\n\r\n                        <button type=\"submit\">ADD NOTE</button>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Noteapp;\r\n","import React from \"react\";\nimport \"./App.css\";\n\nimport Greet from \"./Components/testfunction\";\nimport Message from \"./Components/testclass\";\nimport MessageState from \"./Components/sateclass\";\nimport Counter from \"./Components/Counter\";\nimport Eventhandler from \"./Components/eventHandler\";\nimport ParentComponent from \"./Components/Parent\";\nimport Conditional from \"./Components/ConditionalOperators\";\nimport Styles from \"./Components/Styles\";\nimport InlineStyling from \"./Components/inlinestyling\";\nimport Noteapp from './Notestakingapp/Noteapp';\nimport './Notestakingapp/Noteapp.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <Greet name='saikiran'/>\n      <Greet name='saipriya'/>\n      <Greet name='sarika'/>\n  <Message relation='siblings'/> \n  <MessageState/>  \n  <Counter/>\n  <Eventhandler/>\n  \n  <Conditional/>\n  <Styles />\n  \n  <InlineStyling/>\n  <ParentComponent /> */}\n  <Noteapp/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}